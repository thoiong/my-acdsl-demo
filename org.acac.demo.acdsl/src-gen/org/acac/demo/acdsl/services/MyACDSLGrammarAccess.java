/*
 * generated by Xtext 2.11.0
 */
package org.acac.demo.acdsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyACDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.acac.demo.acdsl.MyACDSL.Model");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsAbstractElementParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//Model:
		//	elements+=AbstractElement*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=AbstractElement*
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//AbstractElement
		public RuleCall getElementsAbstractElementParserRuleCall_0() { return cElementsAbstractElementParserRuleCall_0; }
	}
	public class DOUBLEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.acac.demo.acdsl.MyACDSL.DOUBLE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//DOUBLE:
		//	INT '.' INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT '.' INT
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	public class AbstractElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.acac.demo.acdsl.MyACDSL.AbstractElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConfigurationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDeploymentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOperationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//AbstractElement:
		//	Configuration | Deployment | Operation;
		@Override public ParserRule getRule() { return rule; }
		
		//Configuration | Deployment | Operation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Configuration
		public RuleCall getConfigurationParserRuleCall_0() { return cConfigurationParserRuleCall_0; }
		
		//Deployment
		public RuleCall getDeploymentParserRuleCall_1() { return cDeploymentParserRuleCall_1; }
		
		//Operation
		public RuleCall getOperationParserRuleCall_2() { return cOperationParserRuleCall_2; }
	}
	public class ConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.acac.demo.acdsl.MyACDSL.Configuration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConfigurationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cOfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAppNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAppNameIDTerminalRuleCall_2_0 = (RuleCall)cAppNameAssignment_2.eContents().get(0);
		private final Keyword cOnKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOsSupportedOsEnumRuleCall_4_0 = (RuleCall)cOsAssignment_4.eContents().get(0);
		private final Keyword cOSKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cAppServerAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cAppServerAppServerInfoParserRuleCall_6_0 = (RuleCall)cAppServerAssignment_6.eContents().get(0);
		private final Keyword cServerKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cBeginCommonParametersKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cCommonParamsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cCommonParamsCommonParamParserRuleCall_9_0 = (RuleCall)cCommonParamsAssignment_9.eContents().get(0);
		private final Keyword cEndCommonParametersKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cBeginApplicationConfigurationKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cConfigurationsAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cConfigurationsConfigurationTypeParserRuleCall_12_0 = (RuleCall)cConfigurationsAssignment_12.eContents().get(0);
		private final Keyword cEndApplicationConfigurationKeyword_13 = (Keyword)cGroup.eContents().get(13);
		
		//Configuration:
		//	'configuration' 'of'
		//	appName=ID 'on'
		//	os=SupportedOs 'OS,'
		//	appServer=AppServerInfo 'Server'
		//	'begin-common-parameters'
		//	commonParams+=CommonParam*
		//	'end-common-parameters'
		//	'begin-application-configuration'
		//	configurations+=ConfigurationType*
		//	'end-application-configuration';
		@Override public ParserRule getRule() { return rule; }
		
		//'configuration' 'of' appName=ID 'on' os=SupportedOs 'OS,' appServer=AppServerInfo 'Server' 'begin-common-parameters'
		//commonParams+=CommonParam* 'end-common-parameters' 'begin-application-configuration'
		//configurations+=ConfigurationType* 'end-application-configuration'
		public Group getGroup() { return cGroup; }
		
		//'configuration'
		public Keyword getConfigurationKeyword_0() { return cConfigurationKeyword_0; }
		
		//'of'
		public Keyword getOfKeyword_1() { return cOfKeyword_1; }
		
		//appName=ID
		public Assignment getAppNameAssignment_2() { return cAppNameAssignment_2; }
		
		//ID
		public RuleCall getAppNameIDTerminalRuleCall_2_0() { return cAppNameIDTerminalRuleCall_2_0; }
		
		//'on'
		public Keyword getOnKeyword_3() { return cOnKeyword_3; }
		
		//os=SupportedOs
		public Assignment getOsAssignment_4() { return cOsAssignment_4; }
		
		//SupportedOs
		public RuleCall getOsSupportedOsEnumRuleCall_4_0() { return cOsSupportedOsEnumRuleCall_4_0; }
		
		//'OS,'
		public Keyword getOSKeyword_5() { return cOSKeyword_5; }
		
		//appServer=AppServerInfo
		public Assignment getAppServerAssignment_6() { return cAppServerAssignment_6; }
		
		//AppServerInfo
		public RuleCall getAppServerAppServerInfoParserRuleCall_6_0() { return cAppServerAppServerInfoParserRuleCall_6_0; }
		
		//'Server'
		public Keyword getServerKeyword_7() { return cServerKeyword_7; }
		
		//'begin-common-parameters'
		public Keyword getBeginCommonParametersKeyword_8() { return cBeginCommonParametersKeyword_8; }
		
		//commonParams+=CommonParam*
		public Assignment getCommonParamsAssignment_9() { return cCommonParamsAssignment_9; }
		
		//CommonParam
		public RuleCall getCommonParamsCommonParamParserRuleCall_9_0() { return cCommonParamsCommonParamParserRuleCall_9_0; }
		
		//'end-common-parameters'
		public Keyword getEndCommonParametersKeyword_10() { return cEndCommonParametersKeyword_10; }
		
		//'begin-application-configuration'
		public Keyword getBeginApplicationConfigurationKeyword_11() { return cBeginApplicationConfigurationKeyword_11; }
		
		//configurations+=ConfigurationType*
		public Assignment getConfigurationsAssignment_12() { return cConfigurationsAssignment_12; }
		
		//ConfigurationType
		public RuleCall getConfigurationsConfigurationTypeParserRuleCall_12_0() { return cConfigurationsConfigurationTypeParserRuleCall_12_0; }
		
		//'end-application-configuration'
		public Keyword getEndApplicationConfigurationKeyword_13() { return cEndApplicationConfigurationKeyword_13; }
	}
	public class DeploymentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.acac.demo.acdsl.MyACDSL.Deployment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDeploymentAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDeploymentKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cOperationsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAppOpAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAppOpDeploymentOpEnumRuleCall_3_0 = (RuleCall)cAppOpAssignment_3.eContents().get(0);
		
		//Deployment:
		//	{Deployment}
		//	'deployment' 'operations:'
		//	appOp+=DeploymentOp*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Deployment} 'deployment' 'operations:' appOp+=DeploymentOp*
		public Group getGroup() { return cGroup; }
		
		//{Deployment}
		public Action getDeploymentAction_0() { return cDeploymentAction_0; }
		
		//'deployment'
		public Keyword getDeploymentKeyword_1() { return cDeploymentKeyword_1; }
		
		//'operations:'
		public Keyword getOperationsKeyword_2() { return cOperationsKeyword_2; }
		
		//appOp+=DeploymentOp*
		public Assignment getAppOpAssignment_3() { return cAppOpAssignment_3; }
		
		//DeploymentOp
		public RuleCall getAppOpDeploymentOpEnumRuleCall_3_0() { return cAppOpDeploymentOpEnumRuleCall_3_0; }
	}
	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.acac.demo.acdsl.MyACDSL.Operation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOperationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOperationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cServerOpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cServerOpSupportedContainerOperationsEnumRuleCall_2_0 = (RuleCall)cServerOpAssignment_2.eContents().get(0);
		
		//Operation:
		//	{Operation}
		//	'operation'
		//	serverOp+=SupportedContainerOperations*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Operation} 'operation' serverOp+=SupportedContainerOperations*
		public Group getGroup() { return cGroup; }
		
		//{Operation}
		public Action getOperationAction_0() { return cOperationAction_0; }
		
		//'operation'
		public Keyword getOperationKeyword_1() { return cOperationKeyword_1; }
		
		//serverOp+=SupportedContainerOperations*
		public Assignment getServerOpAssignment_2() { return cServerOpAssignment_2; }
		
		//SupportedContainerOperations
		public RuleCall getServerOpSupportedContainerOperationsEnumRuleCall_2_0() { return cServerOpSupportedContainerOperationsEnumRuleCall_2_0; }
	}
	public class AppServerInfoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.acac.demo.acdsl.MyACDSL.AppServerInfo");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNameSupportedContainerEnumRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cAllKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cVersionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVersionDOUBLEParserRuleCall_1_1_0 = (RuleCall)cVersionAssignment_1_1.eContents().get(0);
		
		//AppServerInfo:
		//	name=SupportedContainer | 'all'
		//	version=DOUBLE;
		@Override public ParserRule getRule() { return rule; }
		
		//name=SupportedContainer | 'all' version=DOUBLE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//name=SupportedContainer
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//SupportedContainer
		public RuleCall getNameSupportedContainerEnumRuleCall_0_0() { return cNameSupportedContainerEnumRuleCall_0_0; }
		
		//'all' version=DOUBLE
		public Group getGroup_1() { return cGroup_1; }
		
		//'all'
		public Keyword getAllKeyword_1_0() { return cAllKeyword_1_0; }
		
		//version=DOUBLE
		public Assignment getVersionAssignment_1_1() { return cVersionAssignment_1_1; }
		
		//DOUBLE
		public RuleCall getVersionDOUBLEParserRuleCall_1_1_0() { return cVersionDOUBLEParserRuleCall_1_1_0; }
	}
	public class CommonParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.acac.demo.acdsl.MyACDSL.CommonParam");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommonParamKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//CommonParam:
		//	'commonParam'
		//	name=ID
		//	value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'commonParam' name=ID value=STRING
		public Group getGroup() { return cGroup; }
		
		//'commonParam'
		public Keyword getCommonParamKeyword_0() { return cCommonParamKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}
	public class ConfigurationTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.acac.demo.acdsl.MyACDSL.ConfigurationType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cServerJvmSettingParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cJAASAliasParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cJdbcProviderParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDataSourceParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ConfigurationType:
		//	ServerJvmSetting | JAASAlias | JdbcProvider | DataSource;
		@Override public ParserRule getRule() { return rule; }
		
		//ServerJvmSetting | JAASAlias | JdbcProvider | DataSource
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ServerJvmSetting
		public RuleCall getServerJvmSettingParserRuleCall_0() { return cServerJvmSettingParserRuleCall_0; }
		
		//JAASAlias
		public RuleCall getJAASAliasParserRuleCall_1() { return cJAASAliasParserRuleCall_1; }
		
		//JdbcProvider
		public RuleCall getJdbcProviderParserRuleCall_2() { return cJdbcProviderParserRuleCall_2; }
		
		//DataSource
		public RuleCall getDataSourceParserRuleCall_3() { return cDataSourceParserRuleCall_3; }
	}
	public class DataSourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.acac.demo.acdsl.MyACDSL.DataSource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDataSourceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cScopeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cScopeCommonParamCrossReference_1_0 = (CrossReference)cScopeAssignment_1.eContents().get(0);
		private final RuleCall cScopeCommonParamIDTerminalRuleCall_1_0_1 = (RuleCall)cScopeCommonParamCrossReference_1_0.eContents().get(1);
		private final Assignment cDataSourceNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDataSourceNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cDataSourceNameAssignment_2.eContents().get(0);
		private final Assignment cJndiNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cJndiNameSTRINGTerminalRuleCall_3_0 = (RuleCall)cJndiNameAssignment_3.eContents().get(0);
		private final Assignment cJdbcProviderNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cJdbcProviderNameSTRINGTerminalRuleCall_4_0 = (RuleCall)cJdbcProviderNameAssignment_4.eContents().get(0);
		private final Assignment cDataSourceUrlAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDataSourceUrlSTRINGTerminalRuleCall_5_0 = (RuleCall)cDataSourceUrlAssignment_5.eContents().get(0);
		private final Assignment cComponentManagedAuthenticationAliasAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cComponentManagedAuthenticationAliasCommonParamCrossReference_6_0 = (CrossReference)cComponentManagedAuthenticationAliasAssignment_6.eContents().get(0);
		private final RuleCall cComponentManagedAuthenticationAliasCommonParamIDTerminalRuleCall_6_0_1 = (RuleCall)cComponentManagedAuthenticationAliasCommonParamCrossReference_6_0.eContents().get(1);
		private final Assignment cMappingConfigurationAliasAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cMappingConfigurationAliasCommonParamCrossReference_7_0 = (CrossReference)cMappingConfigurationAliasAssignment_7.eContents().get(0);
		private final RuleCall cMappingConfigurationAliasCommonParamIDTerminalRuleCall_7_0_1 = (RuleCall)cMappingConfigurationAliasCommonParamCrossReference_7_0.eContents().get(1);
		private final Assignment cContainerMmanagedAuthenticationAliasAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cContainerMmanagedAuthenticationAliasCommonParamCrossReference_8_0 = (CrossReference)cContainerMmanagedAuthenticationAliasAssignment_8.eContents().get(0);
		private final RuleCall cContainerMmanagedAuthenticationAliasCommonParamIDTerminalRuleCall_8_0_1 = (RuleCall)cContainerMmanagedAuthenticationAliasCommonParamCrossReference_8_0.eContents().get(1);
		
		//DataSource:
		//	'dataSource'
		//	scope=[CommonParam] dataSourceName=STRING
		//	jndiName=STRING
		//	jdbcProviderName=STRING
		//	dataSourceUrl=STRING
		//	componentManagedAuthenticationAlias=[CommonParam] mappingConfigurationAlias=[CommonParam]
		//	containerMmanagedAuthenticationAlias=[CommonParam];
		@Override public ParserRule getRule() { return rule; }
		
		//'dataSource' scope=[CommonParam] dataSourceName=STRING jndiName=STRING jdbcProviderName=STRING dataSourceUrl=STRING
		//componentManagedAuthenticationAlias=[CommonParam] mappingConfigurationAlias=[CommonParam]
		//containerMmanagedAuthenticationAlias=[CommonParam]
		public Group getGroup() { return cGroup; }
		
		//'dataSource'
		public Keyword getDataSourceKeyword_0() { return cDataSourceKeyword_0; }
		
		//scope=[CommonParam]
		public Assignment getScopeAssignment_1() { return cScopeAssignment_1; }
		
		//[CommonParam]
		public CrossReference getScopeCommonParamCrossReference_1_0() { return cScopeCommonParamCrossReference_1_0; }
		
		//ID
		public RuleCall getScopeCommonParamIDTerminalRuleCall_1_0_1() { return cScopeCommonParamIDTerminalRuleCall_1_0_1; }
		
		//dataSourceName=STRING
		public Assignment getDataSourceNameAssignment_2() { return cDataSourceNameAssignment_2; }
		
		//STRING
		public RuleCall getDataSourceNameSTRINGTerminalRuleCall_2_0() { return cDataSourceNameSTRINGTerminalRuleCall_2_0; }
		
		//jndiName=STRING
		public Assignment getJndiNameAssignment_3() { return cJndiNameAssignment_3; }
		
		//STRING
		public RuleCall getJndiNameSTRINGTerminalRuleCall_3_0() { return cJndiNameSTRINGTerminalRuleCall_3_0; }
		
		//jdbcProviderName=STRING
		public Assignment getJdbcProviderNameAssignment_4() { return cJdbcProviderNameAssignment_4; }
		
		//STRING
		public RuleCall getJdbcProviderNameSTRINGTerminalRuleCall_4_0() { return cJdbcProviderNameSTRINGTerminalRuleCall_4_0; }
		
		//dataSourceUrl=STRING
		public Assignment getDataSourceUrlAssignment_5() { return cDataSourceUrlAssignment_5; }
		
		//STRING
		public RuleCall getDataSourceUrlSTRINGTerminalRuleCall_5_0() { return cDataSourceUrlSTRINGTerminalRuleCall_5_0; }
		
		//componentManagedAuthenticationAlias=[CommonParam]
		public Assignment getComponentManagedAuthenticationAliasAssignment_6() { return cComponentManagedAuthenticationAliasAssignment_6; }
		
		//[CommonParam]
		public CrossReference getComponentManagedAuthenticationAliasCommonParamCrossReference_6_0() { return cComponentManagedAuthenticationAliasCommonParamCrossReference_6_0; }
		
		//ID
		public RuleCall getComponentManagedAuthenticationAliasCommonParamIDTerminalRuleCall_6_0_1() { return cComponentManagedAuthenticationAliasCommonParamIDTerminalRuleCall_6_0_1; }
		
		//mappingConfigurationAlias=[CommonParam]
		public Assignment getMappingConfigurationAliasAssignment_7() { return cMappingConfigurationAliasAssignment_7; }
		
		//[CommonParam]
		public CrossReference getMappingConfigurationAliasCommonParamCrossReference_7_0() { return cMappingConfigurationAliasCommonParamCrossReference_7_0; }
		
		//ID
		public RuleCall getMappingConfigurationAliasCommonParamIDTerminalRuleCall_7_0_1() { return cMappingConfigurationAliasCommonParamIDTerminalRuleCall_7_0_1; }
		
		//containerMmanagedAuthenticationAlias=[CommonParam]
		public Assignment getContainerMmanagedAuthenticationAliasAssignment_8() { return cContainerMmanagedAuthenticationAliasAssignment_8; }
		
		//[CommonParam]
		public CrossReference getContainerMmanagedAuthenticationAliasCommonParamCrossReference_8_0() { return cContainerMmanagedAuthenticationAliasCommonParamCrossReference_8_0; }
		
		//ID
		public RuleCall getContainerMmanagedAuthenticationAliasCommonParamIDTerminalRuleCall_8_0_1() { return cContainerMmanagedAuthenticationAliasCommonParamIDTerminalRuleCall_8_0_1; }
	}
	public class JdbcProviderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.acac.demo.acdsl.MyACDSL.JdbcProvider");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cJdbcProviderKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cScopeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cScopeCommonParamCrossReference_1_0 = (CrossReference)cScopeAssignment_1.eContents().get(0);
		private final RuleCall cScopeCommonParamIDTerminalRuleCall_1_0_1 = (RuleCall)cScopeCommonParamCrossReference_1_0.eContents().get(1);
		private final Assignment cDatabaseTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDatabaseTypeSTRINGTerminalRuleCall_2_0 = (RuleCall)cDatabaseTypeAssignment_2.eContents().get(0);
		private final Assignment cProviderTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cProviderTypeSTRINGTerminalRuleCall_3_0 = (RuleCall)cProviderTypeAssignment_3.eContents().get(0);
		private final Assignment cImplementationTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cImplementationTypeSTRINGTerminalRuleCall_4_0 = (RuleCall)cImplementationTypeAssignment_4.eContents().get(0);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameSTRINGTerminalRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		private final Assignment cDescriptionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_6_0 = (RuleCall)cDescriptionAssignment_6.eContents().get(0);
		private final Assignment cClasspathAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cClasspathCommonParamCrossReference_7_0 = (CrossReference)cClasspathAssignment_7.eContents().get(0);
		private final RuleCall cClasspathCommonParamIDTerminalRuleCall_7_0_1 = (RuleCall)cClasspathCommonParamCrossReference_7_0.eContents().get(1);
		
		//JdbcProvider:
		//	'jdbcProvider'
		//	scope=[CommonParam] databaseType=STRING
		//	providerType=STRING
		//	implementationType=STRING
		//	name=STRING
		//	description=STRING
		//	classpath=[CommonParam];
		@Override public ParserRule getRule() { return rule; }
		
		//'jdbcProvider' scope=[CommonParam] databaseType=STRING providerType=STRING implementationType=STRING name=STRING
		//description=STRING classpath=[CommonParam]
		public Group getGroup() { return cGroup; }
		
		//'jdbcProvider'
		public Keyword getJdbcProviderKeyword_0() { return cJdbcProviderKeyword_0; }
		
		//scope=[CommonParam]
		public Assignment getScopeAssignment_1() { return cScopeAssignment_1; }
		
		//[CommonParam]
		public CrossReference getScopeCommonParamCrossReference_1_0() { return cScopeCommonParamCrossReference_1_0; }
		
		//ID
		public RuleCall getScopeCommonParamIDTerminalRuleCall_1_0_1() { return cScopeCommonParamIDTerminalRuleCall_1_0_1; }
		
		//databaseType=STRING
		public Assignment getDatabaseTypeAssignment_2() { return cDatabaseTypeAssignment_2; }
		
		//STRING
		public RuleCall getDatabaseTypeSTRINGTerminalRuleCall_2_0() { return cDatabaseTypeSTRINGTerminalRuleCall_2_0; }
		
		//providerType=STRING
		public Assignment getProviderTypeAssignment_3() { return cProviderTypeAssignment_3; }
		
		//STRING
		public RuleCall getProviderTypeSTRINGTerminalRuleCall_3_0() { return cProviderTypeSTRINGTerminalRuleCall_3_0; }
		
		//implementationType=STRING
		public Assignment getImplementationTypeAssignment_4() { return cImplementationTypeAssignment_4; }
		
		//STRING
		public RuleCall getImplementationTypeSTRINGTerminalRuleCall_4_0() { return cImplementationTypeSTRINGTerminalRuleCall_4_0; }
		
		//name=STRING
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_5_0() { return cNameSTRINGTerminalRuleCall_5_0; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_6() { return cDescriptionAssignment_6; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_6_0() { return cDescriptionSTRINGTerminalRuleCall_6_0; }
		
		//classpath=[CommonParam]
		public Assignment getClasspathAssignment_7() { return cClasspathAssignment_7; }
		
		//[CommonParam]
		public CrossReference getClasspathCommonParamCrossReference_7_0() { return cClasspathCommonParamCrossReference_7_0; }
		
		//ID
		public RuleCall getClasspathCommonParamIDTerminalRuleCall_7_0_1() { return cClasspathCommonParamIDTerminalRuleCall_7_0_1; }
	}
	public class JAASAliasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.acac.demo.acdsl.MyACDSL.JAASAlias");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cJaasAliasKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAliasAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cAliasCommonParamCrossReference_1_0 = (CrossReference)cAliasAssignment_1.eContents().get(0);
		private final RuleCall cAliasCommonParamIDTerminalRuleCall_1_0_1 = (RuleCall)cAliasCommonParamCrossReference_1_0.eContents().get(1);
		private final Assignment cUsernameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUsernameSTRINGTerminalRuleCall_2_0 = (RuleCall)cUsernameAssignment_2.eContents().get(0);
		private final Assignment cPasswordAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPasswordSTRINGTerminalRuleCall_3_0 = (RuleCall)cPasswordAssignment_3.eContents().get(0);
		
		//JAASAlias:
		//	'jaasAlias'
		//	alias=[CommonParam] username=STRING
		//	password=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'jaasAlias' alias=[CommonParam] username=STRING password=STRING
		public Group getGroup() { return cGroup; }
		
		//'jaasAlias'
		public Keyword getJaasAliasKeyword_0() { return cJaasAliasKeyword_0; }
		
		//alias=[CommonParam]
		public Assignment getAliasAssignment_1() { return cAliasAssignment_1; }
		
		//[CommonParam]
		public CrossReference getAliasCommonParamCrossReference_1_0() { return cAliasCommonParamCrossReference_1_0; }
		
		//ID
		public RuleCall getAliasCommonParamIDTerminalRuleCall_1_0_1() { return cAliasCommonParamIDTerminalRuleCall_1_0_1; }
		
		//username=STRING
		public Assignment getUsernameAssignment_2() { return cUsernameAssignment_2; }
		
		//STRING
		public RuleCall getUsernameSTRINGTerminalRuleCall_2_0() { return cUsernameSTRINGTerminalRuleCall_2_0; }
		
		//password=STRING
		public Assignment getPasswordAssignment_3() { return cPasswordAssignment_3; }
		
		//STRING
		public RuleCall getPasswordSTRINGTerminalRuleCall_3_0() { return cPasswordSTRINGTerminalRuleCall_3_0; }
	}
	public class ServerJvmSettingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.acac.demo.acdsl.MyACDSL.ServerJvmSetting");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cServerJvmSettingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//ServerJvmSetting:
		//	'serverJvmSetting'
		//	name=STRING
		//	value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'serverJvmSetting' name=STRING value=STRING
		public Group getGroup() { return cGroup; }
		
		//'serverJvmSetting'
		public Keyword getServerJvmSettingKeyword_0() { return cServerJvmSettingKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}
	
	public class SupportedContainerElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.acac.demo.acdsl.MyACDSL.SupportedContainer");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cWebSphereEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cWebSphereWebSphereKeyword_0_0 = (Keyword)cWebSphereEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cTomcatEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cTomcatTomcatKeyword_1_0 = (Keyword)cTomcatEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum SupportedContainer:
		//	WebSphere | Tomcat;
		public EnumRule getRule() { return rule; }
		
		//WebSphere | Tomcat
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//WebSphere
		public EnumLiteralDeclaration getWebSphereEnumLiteralDeclaration_0() { return cWebSphereEnumLiteralDeclaration_0; }
		
		//"WebSphere"
		public Keyword getWebSphereWebSphereKeyword_0_0() { return cWebSphereWebSphereKeyword_0_0; }
		
		//Tomcat
		public EnumLiteralDeclaration getTomcatEnumLiteralDeclaration_1() { return cTomcatEnumLiteralDeclaration_1; }
		
		//"Tomcat"
		public Keyword getTomcatTomcatKeyword_1_0() { return cTomcatTomcatKeyword_1_0; }
	}
	public class SupportedContainerOperationsElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.acac.demo.acdsl.MyACDSL.SupportedContainerOperations");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cStopEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cStopStopKeyword_0_0 = (Keyword)cStopEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cStartEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cStartStartKeyword_1_0 = (Keyword)cStartEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cRestartEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cRestartRestartKeyword_2_0 = (Keyword)cRestartEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum SupportedContainerOperations:
		//	stop | start | restart;
		public EnumRule getRule() { return rule; }
		
		//stop | start | restart
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//stop
		public EnumLiteralDeclaration getStopEnumLiteralDeclaration_0() { return cStopEnumLiteralDeclaration_0; }
		
		//"stop"
		public Keyword getStopStopKeyword_0_0() { return cStopStopKeyword_0_0; }
		
		//start
		public EnumLiteralDeclaration getStartEnumLiteralDeclaration_1() { return cStartEnumLiteralDeclaration_1; }
		
		//"start"
		public Keyword getStartStartKeyword_1_0() { return cStartStartKeyword_1_0; }
		
		//restart
		public EnumLiteralDeclaration getRestartEnumLiteralDeclaration_2() { return cRestartEnumLiteralDeclaration_2; }
		
		//"restart"
		public Keyword getRestartRestartKeyword_2_0() { return cRestartRestartKeyword_2_0; }
	}
	public class SupportedOsElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.acac.demo.acdsl.MyACDSL.SupportedOs");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLinuxEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLinuxLinuxKeyword_0_0 = (Keyword)cLinuxEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cWinEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cWinWinKeyword_1_0 = (Keyword)cWinEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cAixEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cAixAixKeyword_2_0 = (Keyword)cAixEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum SupportedOs:
		//	Linux | Win | Aix;
		public EnumRule getRule() { return rule; }
		
		//Linux | Win | Aix
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Linux
		public EnumLiteralDeclaration getLinuxEnumLiteralDeclaration_0() { return cLinuxEnumLiteralDeclaration_0; }
		
		//"Linux"
		public Keyword getLinuxLinuxKeyword_0_0() { return cLinuxLinuxKeyword_0_0; }
		
		//Win
		public EnumLiteralDeclaration getWinEnumLiteralDeclaration_1() { return cWinEnumLiteralDeclaration_1; }
		
		//"Win"
		public Keyword getWinWinKeyword_1_0() { return cWinWinKeyword_1_0; }
		
		//Aix
		public EnumLiteralDeclaration getAixEnumLiteralDeclaration_2() { return cAixEnumLiteralDeclaration_2; }
		
		//"Aix"
		public Keyword getAixAixKeyword_2_0() { return cAixAixKeyword_2_0; }
	}
	public class DeploymentOpElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.acac.demo.acdsl.MyACDSL.DeploymentOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cUninstallEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cUninstallUninstallKeyword_0_0 = (Keyword)cUninstallEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cInstallEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cInstallInstallKeyword_1_0 = (Keyword)cInstallEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cUpdateEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cUpdateUpdateKeyword_2_0 = (Keyword)cUpdateEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum DeploymentOp:
		//	uninstall | install | update;
		public EnumRule getRule() { return rule; }
		
		//uninstall | install | update
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//uninstall
		public EnumLiteralDeclaration getUninstallEnumLiteralDeclaration_0() { return cUninstallEnumLiteralDeclaration_0; }
		
		//"uninstall"
		public Keyword getUninstallUninstallKeyword_0_0() { return cUninstallUninstallKeyword_0_0; }
		
		//install
		public EnumLiteralDeclaration getInstallEnumLiteralDeclaration_1() { return cInstallEnumLiteralDeclaration_1; }
		
		//"install"
		public Keyword getInstallInstallKeyword_1_0() { return cInstallInstallKeyword_1_0; }
		
		//update
		public EnumLiteralDeclaration getUpdateEnumLiteralDeclaration_2() { return cUpdateEnumLiteralDeclaration_2; }
		
		//"update"
		public Keyword getUpdateUpdateKeyword_2_0() { return cUpdateUpdateKeyword_2_0; }
	}
	
	private final ModelElements pModel;
	private final DOUBLEElements pDOUBLE;
	private final SupportedContainerElements eSupportedContainer;
	private final SupportedContainerOperationsElements eSupportedContainerOperations;
	private final SupportedOsElements eSupportedOs;
	private final DeploymentOpElements eDeploymentOp;
	private final AbstractElementElements pAbstractElement;
	private final ConfigurationElements pConfiguration;
	private final DeploymentElements pDeployment;
	private final OperationElements pOperation;
	private final AppServerInfoElements pAppServerInfo;
	private final CommonParamElements pCommonParam;
	private final ConfigurationTypeElements pConfigurationType;
	private final DataSourceElements pDataSource;
	private final JdbcProviderElements pJdbcProvider;
	private final JAASAliasElements pJAASAlias;
	private final ServerJvmSettingElements pServerJvmSetting;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyACDSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pDOUBLE = new DOUBLEElements();
		this.eSupportedContainer = new SupportedContainerElements();
		this.eSupportedContainerOperations = new SupportedContainerOperationsElements();
		this.eSupportedOs = new SupportedOsElements();
		this.eDeploymentOp = new DeploymentOpElements();
		this.pAbstractElement = new AbstractElementElements();
		this.pConfiguration = new ConfigurationElements();
		this.pDeployment = new DeploymentElements();
		this.pOperation = new OperationElements();
		this.pAppServerInfo = new AppServerInfoElements();
		this.pCommonParam = new CommonParamElements();
		this.pConfigurationType = new ConfigurationTypeElements();
		this.pDataSource = new DataSourceElements();
		this.pJdbcProvider = new JdbcProviderElements();
		this.pJAASAlias = new JAASAliasElements();
		this.pServerJvmSetting = new ServerJvmSettingElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.acac.demo.acdsl.MyACDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	elements+=AbstractElement*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//DOUBLE:
	//	INT '.' INT;
	public DOUBLEElements getDOUBLEAccess() {
		return pDOUBLE;
	}
	
	public ParserRule getDOUBLERule() {
		return getDOUBLEAccess().getRule();
	}
	
	//enum SupportedContainer:
	//	WebSphere | Tomcat;
	public SupportedContainerElements getSupportedContainerAccess() {
		return eSupportedContainer;
	}
	
	public EnumRule getSupportedContainerRule() {
		return getSupportedContainerAccess().getRule();
	}
	
	//enum SupportedContainerOperations:
	//	stop | start | restart;
	public SupportedContainerOperationsElements getSupportedContainerOperationsAccess() {
		return eSupportedContainerOperations;
	}
	
	public EnumRule getSupportedContainerOperationsRule() {
		return getSupportedContainerOperationsAccess().getRule();
	}
	
	//enum SupportedOs:
	//	Linux | Win | Aix;
	public SupportedOsElements getSupportedOsAccess() {
		return eSupportedOs;
	}
	
	public EnumRule getSupportedOsRule() {
		return getSupportedOsAccess().getRule();
	}
	
	//enum DeploymentOp:
	//	uninstall | install | update;
	public DeploymentOpElements getDeploymentOpAccess() {
		return eDeploymentOp;
	}
	
	public EnumRule getDeploymentOpRule() {
		return getDeploymentOpAccess().getRule();
	}
	
	//AbstractElement:
	//	Configuration | Deployment | Operation;
	public AbstractElementElements getAbstractElementAccess() {
		return pAbstractElement;
	}
	
	public ParserRule getAbstractElementRule() {
		return getAbstractElementAccess().getRule();
	}
	
	//Configuration:
	//	'configuration' 'of'
	//	appName=ID 'on'
	//	os=SupportedOs 'OS,'
	//	appServer=AppServerInfo 'Server'
	//	'begin-common-parameters'
	//	commonParams+=CommonParam*
	//	'end-common-parameters'
	//	'begin-application-configuration'
	//	configurations+=ConfigurationType*
	//	'end-application-configuration';
	public ConfigurationElements getConfigurationAccess() {
		return pConfiguration;
	}
	
	public ParserRule getConfigurationRule() {
		return getConfigurationAccess().getRule();
	}
	
	//Deployment:
	//	{Deployment}
	//	'deployment' 'operations:'
	//	appOp+=DeploymentOp*;
	public DeploymentElements getDeploymentAccess() {
		return pDeployment;
	}
	
	public ParserRule getDeploymentRule() {
		return getDeploymentAccess().getRule();
	}
	
	//Operation:
	//	{Operation}
	//	'operation'
	//	serverOp+=SupportedContainerOperations*;
	public OperationElements getOperationAccess() {
		return pOperation;
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}
	
	//AppServerInfo:
	//	name=SupportedContainer | 'all'
	//	version=DOUBLE;
	public AppServerInfoElements getAppServerInfoAccess() {
		return pAppServerInfo;
	}
	
	public ParserRule getAppServerInfoRule() {
		return getAppServerInfoAccess().getRule();
	}
	
	//CommonParam:
	//	'commonParam'
	//	name=ID
	//	value=STRING;
	public CommonParamElements getCommonParamAccess() {
		return pCommonParam;
	}
	
	public ParserRule getCommonParamRule() {
		return getCommonParamAccess().getRule();
	}
	
	//ConfigurationType:
	//	ServerJvmSetting | JAASAlias | JdbcProvider | DataSource;
	public ConfigurationTypeElements getConfigurationTypeAccess() {
		return pConfigurationType;
	}
	
	public ParserRule getConfigurationTypeRule() {
		return getConfigurationTypeAccess().getRule();
	}
	
	//DataSource:
	//	'dataSource'
	//	scope=[CommonParam] dataSourceName=STRING
	//	jndiName=STRING
	//	jdbcProviderName=STRING
	//	dataSourceUrl=STRING
	//	componentManagedAuthenticationAlias=[CommonParam] mappingConfigurationAlias=[CommonParam]
	//	containerMmanagedAuthenticationAlias=[CommonParam];
	public DataSourceElements getDataSourceAccess() {
		return pDataSource;
	}
	
	public ParserRule getDataSourceRule() {
		return getDataSourceAccess().getRule();
	}
	
	//JdbcProvider:
	//	'jdbcProvider'
	//	scope=[CommonParam] databaseType=STRING
	//	providerType=STRING
	//	implementationType=STRING
	//	name=STRING
	//	description=STRING
	//	classpath=[CommonParam];
	public JdbcProviderElements getJdbcProviderAccess() {
		return pJdbcProvider;
	}
	
	public ParserRule getJdbcProviderRule() {
		return getJdbcProviderAccess().getRule();
	}
	
	//JAASAlias:
	//	'jaasAlias'
	//	alias=[CommonParam] username=STRING
	//	password=STRING;
	public JAASAliasElements getJAASAliasAccess() {
		return pJAASAlias;
	}
	
	public ParserRule getJAASAliasRule() {
		return getJAASAliasAccess().getRule();
	}
	
	//ServerJvmSetting:
	//	'serverJvmSetting'
	//	name=STRING
	//	value=STRING;
	public ServerJvmSettingElements getServerJvmSettingAccess() {
		return pServerJvmSetting;
	}
	
	public ParserRule getServerJvmSettingRule() {
		return getServerJvmSettingAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
