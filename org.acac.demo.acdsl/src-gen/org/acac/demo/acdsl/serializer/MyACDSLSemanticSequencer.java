/*
 * generated by Xtext 2.11.0
 */
package org.acac.demo.acdsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.acac.demo.acdsl.myACDSL.AppServerInfo;
import org.acac.demo.acdsl.myACDSL.CommonParam;
import org.acac.demo.acdsl.myACDSL.Configuration;
import org.acac.demo.acdsl.myACDSL.DataSource;
import org.acac.demo.acdsl.myACDSL.Deployment;
import org.acac.demo.acdsl.myACDSL.JAASAlias;
import org.acac.demo.acdsl.myACDSL.JdbcProvider;
import org.acac.demo.acdsl.myACDSL.Model;
import org.acac.demo.acdsl.myACDSL.MyACDSLPackage;
import org.acac.demo.acdsl.myACDSL.Operation;
import org.acac.demo.acdsl.myACDSL.ServerJvmSetting;
import org.acac.demo.acdsl.services.MyACDSLGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class MyACDSLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyACDSLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MyACDSLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MyACDSLPackage.APP_SERVER_INFO:
				sequence_AppServerInfo(context, (AppServerInfo) semanticObject); 
				return; 
			case MyACDSLPackage.COMMON_PARAM:
				sequence_CommonParam(context, (CommonParam) semanticObject); 
				return; 
			case MyACDSLPackage.CONFIGURATION:
				sequence_Configuration(context, (Configuration) semanticObject); 
				return; 
			case MyACDSLPackage.DATA_SOURCE:
				sequence_DataSource(context, (DataSource) semanticObject); 
				return; 
			case MyACDSLPackage.DEPLOYMENT:
				sequence_Deployment(context, (Deployment) semanticObject); 
				return; 
			case MyACDSLPackage.JAAS_ALIAS:
				sequence_JAASAlias(context, (JAASAlias) semanticObject); 
				return; 
			case MyACDSLPackage.JDBC_PROVIDER:
				sequence_JdbcProvider(context, (JdbcProvider) semanticObject); 
				return; 
			case MyACDSLPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case MyACDSLPackage.OPERATION:
				sequence_Operation(context, (Operation) semanticObject); 
				return; 
			case MyACDSLPackage.SERVER_JVM_SETTING:
				sequence_ServerJvmSetting(context, (ServerJvmSetting) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     AppServerInfo returns AppServerInfo
	 *
	 * Constraint:
	 *     (name=SupportedContainer | version=DOUBLE)
	 */
	protected void sequence_AppServerInfo(ISerializationContext context, AppServerInfo semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CommonParam returns CommonParam
	 *
	 * Constraint:
	 *     (name=ID value=STRING)
	 */
	protected void sequence_CommonParam(ISerializationContext context, CommonParam semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyACDSLPackage.Literals.COMMON_PARAM__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyACDSLPackage.Literals.COMMON_PARAM__NAME));
			if (transientValues.isValueTransient(semanticObject, MyACDSLPackage.Literals.COMMON_PARAM__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyACDSLPackage.Literals.COMMON_PARAM__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCommonParamAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getCommonParamAccess().getValueSTRINGTerminalRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AbstractElement returns Configuration
	 *     Configuration returns Configuration
	 *
	 * Constraint:
	 *     (appName=ID os=SupportedOs appServer=AppServerInfo commonParams+=CommonParam* configurations+=ConfigurationType*)
	 */
	protected void sequence_Configuration(ISerializationContext context, Configuration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConfigurationType returns DataSource
	 *     DataSource returns DataSource
	 *
	 * Constraint:
	 *     (
	 *         scope=[CommonParam|ID] 
	 *         dataSourceName=STRING 
	 *         jndiName=STRING 
	 *         jdbcProviderName=STRING 
	 *         dataSourceUrl=STRING 
	 *         componentManagedAuthenticationAlias=[CommonParam|ID] 
	 *         mappingConfigurationAlias=[CommonParam|ID] 
	 *         containerMmanagedAuthenticationAlias=[CommonParam|ID]
	 *     )
	 */
	protected void sequence_DataSource(ISerializationContext context, DataSource semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyACDSLPackage.Literals.DATA_SOURCE__SCOPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyACDSLPackage.Literals.DATA_SOURCE__SCOPE));
			if (transientValues.isValueTransient(semanticObject, MyACDSLPackage.Literals.DATA_SOURCE__DATA_SOURCE_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyACDSLPackage.Literals.DATA_SOURCE__DATA_SOURCE_NAME));
			if (transientValues.isValueTransient(semanticObject, MyACDSLPackage.Literals.DATA_SOURCE__JNDI_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyACDSLPackage.Literals.DATA_SOURCE__JNDI_NAME));
			if (transientValues.isValueTransient(semanticObject, MyACDSLPackage.Literals.DATA_SOURCE__JDBC_PROVIDER_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyACDSLPackage.Literals.DATA_SOURCE__JDBC_PROVIDER_NAME));
			if (transientValues.isValueTransient(semanticObject, MyACDSLPackage.Literals.DATA_SOURCE__DATA_SOURCE_URL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyACDSLPackage.Literals.DATA_SOURCE__DATA_SOURCE_URL));
			if (transientValues.isValueTransient(semanticObject, MyACDSLPackage.Literals.DATA_SOURCE__COMPONENT_MANAGED_AUTHENTICATION_ALIAS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyACDSLPackage.Literals.DATA_SOURCE__COMPONENT_MANAGED_AUTHENTICATION_ALIAS));
			if (transientValues.isValueTransient(semanticObject, MyACDSLPackage.Literals.DATA_SOURCE__MAPPING_CONFIGURATION_ALIAS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyACDSLPackage.Literals.DATA_SOURCE__MAPPING_CONFIGURATION_ALIAS));
			if (transientValues.isValueTransient(semanticObject, MyACDSLPackage.Literals.DATA_SOURCE__CONTAINER_MMANAGED_AUTHENTICATION_ALIAS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyACDSLPackage.Literals.DATA_SOURCE__CONTAINER_MMANAGED_AUTHENTICATION_ALIAS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDataSourceAccess().getScopeCommonParamIDTerminalRuleCall_1_0_1(), semanticObject.eGet(MyACDSLPackage.Literals.DATA_SOURCE__SCOPE, false));
		feeder.accept(grammarAccess.getDataSourceAccess().getDataSourceNameSTRINGTerminalRuleCall_2_0(), semanticObject.getDataSourceName());
		feeder.accept(grammarAccess.getDataSourceAccess().getJndiNameSTRINGTerminalRuleCall_3_0(), semanticObject.getJndiName());
		feeder.accept(grammarAccess.getDataSourceAccess().getJdbcProviderNameSTRINGTerminalRuleCall_4_0(), semanticObject.getJdbcProviderName());
		feeder.accept(grammarAccess.getDataSourceAccess().getDataSourceUrlSTRINGTerminalRuleCall_5_0(), semanticObject.getDataSourceUrl());
		feeder.accept(grammarAccess.getDataSourceAccess().getComponentManagedAuthenticationAliasCommonParamIDTerminalRuleCall_6_0_1(), semanticObject.eGet(MyACDSLPackage.Literals.DATA_SOURCE__COMPONENT_MANAGED_AUTHENTICATION_ALIAS, false));
		feeder.accept(grammarAccess.getDataSourceAccess().getMappingConfigurationAliasCommonParamIDTerminalRuleCall_7_0_1(), semanticObject.eGet(MyACDSLPackage.Literals.DATA_SOURCE__MAPPING_CONFIGURATION_ALIAS, false));
		feeder.accept(grammarAccess.getDataSourceAccess().getContainerMmanagedAuthenticationAliasCommonParamIDTerminalRuleCall_8_0_1(), semanticObject.eGet(MyACDSLPackage.Literals.DATA_SOURCE__CONTAINER_MMANAGED_AUTHENTICATION_ALIAS, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AbstractElement returns Deployment
	 *     Deployment returns Deployment
	 *
	 * Constraint:
	 *     appOp+=DeploymentOp*
	 */
	protected void sequence_Deployment(ISerializationContext context, Deployment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConfigurationType returns JAASAlias
	 *     JAASAlias returns JAASAlias
	 *
	 * Constraint:
	 *     (alias=[CommonParam|ID] username=STRING password=STRING)
	 */
	protected void sequence_JAASAlias(ISerializationContext context, JAASAlias semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyACDSLPackage.Literals.JAAS_ALIAS__ALIAS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyACDSLPackage.Literals.JAAS_ALIAS__ALIAS));
			if (transientValues.isValueTransient(semanticObject, MyACDSLPackage.Literals.JAAS_ALIAS__USERNAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyACDSLPackage.Literals.JAAS_ALIAS__USERNAME));
			if (transientValues.isValueTransient(semanticObject, MyACDSLPackage.Literals.JAAS_ALIAS__PASSWORD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyACDSLPackage.Literals.JAAS_ALIAS__PASSWORD));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJAASAliasAccess().getAliasCommonParamIDTerminalRuleCall_1_0_1(), semanticObject.eGet(MyACDSLPackage.Literals.JAAS_ALIAS__ALIAS, false));
		feeder.accept(grammarAccess.getJAASAliasAccess().getUsernameSTRINGTerminalRuleCall_2_0(), semanticObject.getUsername());
		feeder.accept(grammarAccess.getJAASAliasAccess().getPasswordSTRINGTerminalRuleCall_3_0(), semanticObject.getPassword());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ConfigurationType returns JdbcProvider
	 *     JdbcProvider returns JdbcProvider
	 *
	 * Constraint:
	 *     (
	 *         scope=[CommonParam|ID] 
	 *         databaseType=STRING 
	 *         providerType=STRING 
	 *         implementationType=STRING 
	 *         name=STRING 
	 *         description=STRING 
	 *         classpath=[CommonParam|ID]
	 *     )
	 */
	protected void sequence_JdbcProvider(ISerializationContext context, JdbcProvider semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyACDSLPackage.Literals.JDBC_PROVIDER__SCOPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyACDSLPackage.Literals.JDBC_PROVIDER__SCOPE));
			if (transientValues.isValueTransient(semanticObject, MyACDSLPackage.Literals.JDBC_PROVIDER__DATABASE_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyACDSLPackage.Literals.JDBC_PROVIDER__DATABASE_TYPE));
			if (transientValues.isValueTransient(semanticObject, MyACDSLPackage.Literals.JDBC_PROVIDER__PROVIDER_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyACDSLPackage.Literals.JDBC_PROVIDER__PROVIDER_TYPE));
			if (transientValues.isValueTransient(semanticObject, MyACDSLPackage.Literals.JDBC_PROVIDER__IMPLEMENTATION_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyACDSLPackage.Literals.JDBC_PROVIDER__IMPLEMENTATION_TYPE));
			if (transientValues.isValueTransient(semanticObject, MyACDSLPackage.Literals.JDBC_PROVIDER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyACDSLPackage.Literals.JDBC_PROVIDER__NAME));
			if (transientValues.isValueTransient(semanticObject, MyACDSLPackage.Literals.JDBC_PROVIDER__DESCRIPTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyACDSLPackage.Literals.JDBC_PROVIDER__DESCRIPTION));
			if (transientValues.isValueTransient(semanticObject, MyACDSLPackage.Literals.JDBC_PROVIDER__CLASSPATH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyACDSLPackage.Literals.JDBC_PROVIDER__CLASSPATH));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJdbcProviderAccess().getScopeCommonParamIDTerminalRuleCall_1_0_1(), semanticObject.eGet(MyACDSLPackage.Literals.JDBC_PROVIDER__SCOPE, false));
		feeder.accept(grammarAccess.getJdbcProviderAccess().getDatabaseTypeSTRINGTerminalRuleCall_2_0(), semanticObject.getDatabaseType());
		feeder.accept(grammarAccess.getJdbcProviderAccess().getProviderTypeSTRINGTerminalRuleCall_3_0(), semanticObject.getProviderType());
		feeder.accept(grammarAccess.getJdbcProviderAccess().getImplementationTypeSTRINGTerminalRuleCall_4_0(), semanticObject.getImplementationType());
		feeder.accept(grammarAccess.getJdbcProviderAccess().getNameSTRINGTerminalRuleCall_5_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getJdbcProviderAccess().getDescriptionSTRINGTerminalRuleCall_6_0(), semanticObject.getDescription());
		feeder.accept(grammarAccess.getJdbcProviderAccess().getClasspathCommonParamIDTerminalRuleCall_7_0_1(), semanticObject.eGet(MyACDSLPackage.Literals.JDBC_PROVIDER__CLASSPATH, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     elements+=AbstractElement+
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AbstractElement returns Operation
	 *     Operation returns Operation
	 *
	 * Constraint:
	 *     serverOp+=SupportedContainerOperations*
	 */
	protected void sequence_Operation(ISerializationContext context, Operation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConfigurationType returns ServerJvmSetting
	 *     ServerJvmSetting returns ServerJvmSetting
	 *
	 * Constraint:
	 *     (name=STRING value=STRING)
	 */
	protected void sequence_ServerJvmSetting(ISerializationContext context, ServerJvmSetting semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyACDSLPackage.Literals.SERVER_JVM_SETTING__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyACDSLPackage.Literals.SERVER_JVM_SETTING__NAME));
			if (transientValues.isValueTransient(semanticObject, MyACDSLPackage.Literals.SERVER_JVM_SETTING__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyACDSLPackage.Literals.SERVER_JVM_SETTING__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getServerJvmSettingAccess().getNameSTRINGTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getServerJvmSettingAccess().getValueSTRINGTerminalRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
}
